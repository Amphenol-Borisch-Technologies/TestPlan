<?xml version="1.0" encoding="utf-8"?>
<!-- NOTE:  a shame; https://stackoverflow.com/questions/15132662/can-i-declare-and-use-dtd-entities-in-app-config
	<!DOCTYPE configuration [
		<!ENTITY MeasurementCustom "MeasurementCustom" >
		<!ENTITY MeasurementNumeric "MeasurementNumeric" >
		<!ENTITY MeasurementProcess "MeasurementProcess" >
		<!ENTITY MeasurementTextual "MeasurementTextual" >
		<!ENTITY NotApplicable "NotApplicable" >
	]>
 -->
<!-- NOTE:  https://stackoverflow.com/questions/5303476/how-to-fix-error-could-not-find-schema-information-for-the-attribute-element -->
<configuration>
  <configSections>
    <section name="InstrumentsStationaryRequiredSection" type="ABT.Test.TestLib.AppConfig.InstrumentsStationaryRequiredSection, TestLib" />
    <section name="InstrumentsPortableRequiredSection" type="ABT.Test.TestLib.AppConfig.InstrumentsPortableRequiredSection, TestLib" />
  </configSections>
  <appSettings>
    <!-- NOTE:  All appSetting String values subjected to .Trim() method during import into Lib.
         NOTE:  Standard TestExec Logger configuration settings, specific to the Logger sub-system. -->
    <add key="LOGGER_FileEnabled" value="true" />
    <!-- LOGGER_FileEnabled & LOGGER_SQLEnabled are independent of each other.
		<		- Can choose to Log to Rich Text only, SQL only, both Rich Text & SQL or neither, depending what the Customer requires. -->
    <add key="LOGGER_FilePath" value="P:\Test\TDR\Diagnostics" />
    <!-- Rich Text Log Paths are only relevant if LOGGER_FileEnabled is true.
				- Windows file/folder permissions to create, read, write & search in LOGGER_FilePath are required.
				- Logging.FileStop() requires terminating "\" character. -->
    <add key="LOGGER_SQLEnabled" value="false" />
    <!-- LOGGER_FileEnabled & LOGGER_SQLEnabled are independent of each other.
				- Can choose to Log to Rich Text only, SQL only, both Rich Text & SQL or neither, depending what the Customer requires. -->
    <add key="LOGGER_SQLConnectionString" value="" />
    <!-- SQL connection string only relevant if LOGGER_SQLEnabled is true. -->
    <add key="LOGGER_SerialNumberDialogEnabled" value="false" />
    <!-- LOGGER_SerialNumberDialogEnabled determines the input method for UUT Serial Numbers:
				- When LOGGER_SerialNumberDialogEnabled="true", class SerialNumberDialog exclusively handles Serial Number entry via Barcode Scanning of ABT's official Barcoded Serial Number.
          - This enforces correct scanning of Serial Numbers.
				- When LOGGER_SerialNumberDialogEnabled="false", an Interaction.InputBox exclusively prompts test operators to enter ABT Serial Number.
          - This permits manual hand-typed keyboard entry of Serial Numbers, with concommitant high rates of typographic errors.
        - SerialNumberDialog's Barcode Scanner is configured in TestExec's TestExec.config.xml file. -->
    <add key="UUT_SerialNumberRegExCustom" value="NotApplicable" />
    <!-- NOTE:  TestExec's TestExec.config.xml file contains global Regular Expression SerialNumberRegExDefault global Regular Expression SerialNumberRegExDefault can be locally
         overridden by a Test's App.config's UUT_SerialNumberRegExCustom key/value pair, if desired.
         - As Customers sometimes require Serial Number formats that differ from ABT's (or even formats that differ across a Customer's UUTs)
           global SerialNumberRegExDefault can be overridden by custom local UUT_SerialNumberRegExCustom.
         - When not explicitly overridden by an App.config's UUT_SerialNumberRegExCustom, TestExec's TestExec.config.xml SerialNumberRegExDefault is applied instead as the default.
         
         NOTE:  ABT's official Serial Number format is "01BB2-#####", where each "#" is an is an integer in the set {0..9}.
         - However, some Customers prefer other formats:
           - I'm no Regular Expression expert, and below formats are untested, but hopefully they'll work.
						 - Regular Expression ^ABT[0-9]{4}$ hopefully enforces format "ABT####".
						 - Regular Expression ^BRH[0-9]{2}(([0-4][0-9])|([5][0-2]))-[0-9]{3}$ hopefully enforces format "BRHYYWW-###" where YY are the last 2 digits of the year, and WW are the calender week, 01 through 52.
							 - Regular Expression  ^[0-9]{2}(([0-4][0-9])|([5][0-2]))-[0-9]{3}$ hopefully enforces format "YYWW-###".
						 - Regular Expression ^[0-9]{4}$ hopefully enforces format "####" where each "#" is an is an integer in the set {0..9}, and there must be exactly 4.
							 - Change {4} to any number to enforce that many digits.
							 - So, {3} should enforce format "###" and {5} should enforce "#####". -->
    <add key="UUT_Customer" value="ABT" />
    <add key="UUT_Type" value="System" />
    <!-- Recommended choices: { System, Unit, Sub-Unit, CCA, Harness, Component }. -->
    <add key="UUT_Number" value="Diagnostics" />
    <add key="UUT_Revision" value="1.0" />
    <add key="UUT_Description" value="TestExec" />
    <add key="UUT_TestSpecification" value="ABT" />
    <!-- - Provides convenient access to supplementary UUT or test documents that may be helpful when operating the test.
				 - Examples are UUT test procedures, schematics, drawings, BOMs, work instructions, troubleshooting notes, etc. -->
    <add key="UUT_DocumentationFolder" value="P:\Test\Workspace\eDocs\D\Diagnostics" />
    <add key="UUT_ManualsFolder" value="P:\Test\Engineers\Equipment Manuals\TestExec\Diagnostics" />
    <add key="UUT_TestEngineerEmail" value="NotApplicable" />
    <!-- Enter either a valid E-Mail address or NotApplicable. -->
    <add key="UUT_Simulate" value="true" />
    <!-- NOTE:  Must have Instrumentation in order to utilize it:
				 - Set UUT_Simulate = False if have requisite Instrumentation & intend to use it.
           - That is, production testing of UUTs.  This is the normal, default state.
         - Set UUT_Simulate = true if haven't or needn't utilize Instrumentation.
			 	   - This is useful when developing/testing TestExec, especially on a desktop PC workstation, as versus a production test station.
             - Can verify TestExec.config.xml's Apps & Folders element paths are all correct.
             - More significantly, can also verify below TestOperations/TestGroups/TestMeasurement entries are correct.
               - A fair amount of validation occurs after selecting TestOperations/TestGroups with TestExec's "Select Tests" button.
               - This validation of correct TestOperations/TestGroups/TestMeasurement entries can be completed without Instrumentation.
               - Think of it like a compiler checking your code; it won't find logic errors, but will find syntax errors.
             - Lastly, you can code & debug your TestOperations/TestMeasurement methods, including all Debug.Asserts.  Simply exclude or comment method invocations to SCPI VISA Instruments.
		-->
    <add key="ClientSettingsProvider.ServiceUri" value="" />
  </appSettings>
  <InstrumentsStationaryRequiredSection>
    <!-- InstrumentsStationaryRequired are instruments necessary to execute this test, and part of a 
				 test system's set of standard, stationary instruments always available.

				 - Stationary instruments are typically frequently used, and/or inexpen$ive, so are 
					 permanently installed into a test system.
       
				 - Only include stationary instruments that are used by & necessary to this test:
					 - Exclude unnecessary/unused stationary instruments, so they won't be required to execute this test, despite being unused.
					 - Excluding unnecessary/unused stationary instruments minimizes resources and mazimizes production flexibility.

				ID:					Required field, must be present in ABT.Test.TestLib.TestExec's TestExec.config.xml InstrumentsStationary section.
										- Unique Identifier; no 2 can be identical; don't want 2 instances of the same instrument driver object.
				ClassName:  Required element.
										- Class name from ABT.Test.TestLib.InstrumentDrivers.*
										- This is the instrument driver, typically inherited from a manufacturer provided SCPI or IVI driver.
										- The inheritance permits adding custom methods and interfaces, most quite simple, but useful.
                    - Note that instruments may have multiple drivers; SCPI, IVI-C, IVI-COM & IVI.Net are common Keysight provided drivers.
                      - SCPI drivers are likely more familiar, being very similar to native SCPI, but IVI drivers be advantageous.
                      - Regardless which, TestExec developers should utilize their preferred instrument driver.
                      - If absent from TestExec's ABT.Test.TestLib.InstrumentDrivers.*, can utilize preferred drivers 
                        as InstrumentPortableRequired, with driver being installed locally with the Tests project.
                        - Consider adding to TestExec's ABT.Test.TestLib.InstrumentDrivers.* when convenient.

				NOTE:  All InstrumentStationaryRequired String values subjected to .Trim() method during import.
-->
    <InstrumentsStationaryRequired>
      <!--
      <InstrumentStationaryRequired ID="MM1_34401A"   ClassName="ABT.Test.TestLib.InstrumentDrivers.MultiMeters.MM_34401A_SCPI_NET" />
			-->
      <InstrumentStationaryRequired ID="MSMU1_34980A" ClassName="ABT.Test.TestLib.InstrumentDrivers.Multifunction.MSMU_34980A_SCPI_NET" />
      <InstrumentStationaryRequired ID="PS1ε2_E3649A" ClassName="ABT.Test.TestLib.InstrumentDrivers.PowerSupplies.PS_E3649A_SCPI_NET" />
      <InstrumentStationaryRequired ID="PS3_E3634A" ClassName="ABT.Test.TestLib.InstrumentDrivers.PowerSupplies.PS_E3634A_SCPI_NET" />
    </InstrumentsStationaryRequired>
  </InstrumentsStationaryRequiredSection>
  <InstrumentsPortableRequiredSection>
    <!-- InstrumentsPortableRequired are necessary to execute this test, but are non-standard, mobile instruments
				 moved from system to system as needed.
       
				 - Portable instruments are typically infrequently used, and/or expen$ive, so aren't permanently
					 installed into a test system.
       
				 - Only include portable instruments that are used by & necessary to this test:
					 - Exclude unnecessary/unused portable instruments, so they won't be required to execute this test, despite being unused.
					 - Excluding unnecessary/unused portable instruments minimizes resources and mazimizes production flexibility.
           
				ID:	      Required field.
									- Unique Identifier; no 2 can be identical, as ID is unique key in a Dictionary object.
				Detail:	  Required element.
									- Concise description of Instrument.
									- Recommend convention of Manufacturer, Model, Input/Output quantity if applicable, and Instrument type.
										- Keysight E36103B Single Output DC Power Supply
										- Keysight E36234A Dual Output DC Power Supply
										- Keysight 34461A Multi-Meter
				Address:   Required element.
									- Address elements must also all be unique, no duplicates.
									- They must also be valid VISA instrument addresses.
									- VISA instrument addresses are easily determined using Keysight's Connection Expert app
										- https://www.keysight.com/us/en/assets/7018-03222/data-sheets/5990-9362.pdf.
										- Example VISA address for USB instrument: USB0::0x2A8D::0x1602::MY61001983::0::INSTR.
				ClassName:  Required element.
										- Class name from ABT.Test.TestLib.InstrumentDrivers.* or from Test project's instrument drivers.
										- This is the instrument driver, typically inherited from a manufacturer provided SCPI or IVI driver.
										- The inheritance permits adding custom methods and interfaces, most quite simple, but useful.
                    - Note that instruments may have multiple drivers; SCPI, IVI-C, IVI-COM & IVI.Net are common Keysight provided drivers.
                      - SCPI drivers are likely more familiar, being very similar to native SCPI, but IVI drivers be advantageous.
                      - Regardless which, TestExec developers should utilize their preferred instrument driver.
                      - If absent from ABT.Test.TestLib.InstrumentDrivers.*, can utilize preferred drivers 
                        as InstrumentPortableRequired, with driver being installed locally with the Test project.
                        - Consider adding to ABT.Test.TestLib.InstrumentDrivers.* when convenient.
	
				NOTE:  VISA addresses (AKA VISA Resource Names) are explained at:
				- https://www.ni.com/docs/en-US/bundle/labview/page/lvinstio/visa_resource_name_generic.html.
				- https://www.ivifoundation.org/downloads/Architecture%20Specifications/vpp43_2022-05-19.pdf.
					
        NOTE:  All InstrumentsPortableRequired String values subjected to .Trim() method during import.
-->
    <InstrumentsPortableRequired>
      <!--
      <InstrumentPortableRequired ID="MSO1_3014" Detail="Tektronix MSO3014 Mixed Signal Oscilloscope" Address="USB0::0x0699::0x0421::C021373::INSTR" ClassName="ABT.Test.TestLib.InstrumentDrivers.Oscilloscopes.MSO_3014_IVI_COM" />
			-->
    </InstrumentsPortableRequired>
  </InstrumentsPortableRequiredSection>
  <runtime>
  </runtime>
  <system.web>
    <membership defaultProvider="ClientAuthenticationMembershipProvider">
      <providers>
        <add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" />
      </providers>
    </membership>
    <roleManager defaultProvider="ClientRoleProvider" enabled="true">
      <providers>
        <add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400" />
      </providers>
    </roleManager>
  </system.web>
</configuration>